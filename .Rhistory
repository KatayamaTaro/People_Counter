knitr::opts_chunk$set(echo = TRUE)
getwd()
library(tidyverse)
setwd("../Data/")
setwd("./Data/")
getwd()
people_counter_raw<- read.csv(".Raw/People_Counter.csv")
people_counter_raw<- read.csv("./Raw/People_Counter.csv")
View(people_counter_raw)
people_counter_raw<- read.csv("./Raw/People_Counter.csv", skip = 2)
library(lubridate)
people_counter_date<- mdy_hm(people_counter_raw$Time)
people_counter<- as.Date(people_counter_date)
?as.Date
people_counter<- as.Date(people_counter_raw$Time, "%m/%d/%Y %H:%M")
as.Date(people_counter_raw$Time, "%m/%d/%Y %H:%M")
people_counter<- people_counter_raw%>%
as.Date(people_counter_raw$Time, "%m/%d/%Y %H:%M")
library(dplyr)
people_counter<- people_counter_raw%>%
as.Date(people_counter_raw$Time, "%m/%d/%Y %H:%M")
people_counter<- people_counter_raw%>%
mutate(Time= as.Date(people_counter_raw$Time, "%m/%d/%Y %H:%M"))
View(people_counter)
View(people_counter)
ggplot(data, aes(x = Time, y = CABR.Lot.1.Counter)) +
geom_line() +  # Add a line plot
geom_point() + # Add points to the line
labs(title = "CABR Lot 1 Counter Over Time",
x = "Date",
y = "Counter Value") +
theme_minimal()  # Use a minimal theme
ggplot(people_counter, aes(x = Time, y = CABR.Lot.1.Counter)) +
geom_line() +  # Add a line plot
geom_point() + # Add points to the line
labs(title = "CABR Lot 1 Counter Over Time",
x = "Date",
y = "Counter Value") +
theme_minimal()  # Use a minimal theme
library(zoo)
library(tseries)
install.packages("tseries")
library(tseries)
people_counter<- people_counter%>%
rename(Counter = CABR.Lot.1.Counter)
people_counter<- people_counter%>%
rename(counter = Counter)
head(people_counter)
summary(people_counter)
str(people_counter)
# Check for any missing values
sum(is.na(people_counter$counter))
ggplot(people_counter, aes(x = time, y = counter)) +
geom_line() +
geom_point(alpha = 0.3) +
labs(title = "People Counter Time Series",
x = "Date",
y = "Count",
caption = "Note: Look for patterns of zeros after mid-2022") +
theme_minimal()
people_counter<- people_counter%>%
rename(time = Time)
# Create a time series plot
ggplot(people_counter, aes(x = time, y = counter)) +
geom_line() +
geom_point(alpha = 0.3) +
labs(title = "People Counter Time Series",
x = "Date",
y = "Count",
caption = "Note: Look for patterns of zeros after mid-2022") +
theme_minimal()
mid_2022 <- as.Date("2022-07-01")
ggplot(people_counter, aes(x = time, y = counter)) +
geom_line() +
geom_point(alpha = 0.3) +
geom_vline(xintercept = mid_2022, color = "red", linetype = "dashed") +
annotate("text", x = mid_2022, y = max(people_counter$counter, na.rm = TRUE) * 0.9,
label = "Mid-2022", color = "red", angle = 90, vjust = 1.5) +
labs(title = "People Counter Time Series with Mid-2022 Reference",
x = "Date",
y = "Count") +
theme_minimal()
# Analyze zero counts specifically
# Create a new column indicating if count is zero
people_counter$is_zero <- people_counter$counter == 0
before_mid_2022 <- people_counter %>%
filter(time < mid_2022) %>%
summarise(
total_days = n(),
zero_days = sum(is_zero),
percent_zeros = (zero_days / total_days) * 100
)
after_mid_2022 <- people_counter %>%
filter(time >= mid_2022) %>%
summarise(
total_days = n(),
zero_days = sum(is_zero),
percent_zeros = (zero_days / total_days) * 100
)
print("Percentage of zero counts before mid-2022:")
print(before_mid_2022)
print("Percentage of zero counts after mid-2022:")
print(after_mid_2022)
zeros_table <- table(
Period = ifelse(people_counter$time < mid_2022, "Before", "After"),
IsZero = people_counter$is_zero
)
chi_result <- chisq.test(zeros_table)
print(chi_result)
people_counter$month <- month(people_counter$time)
people_counter$year <- year(people_counter$time)
# Create monthly averages
monthly_avg <- people_counter %>%
group_by(year, month) %>%
summarise(avg_count = mean(counter, na.rm = TRUE),
pct_zeros = mean(is_zero, na.rm = TRUE) * 100,
.groups = "drop") %>%
mutate(date = as.Date(paste(year, month, "15", sep = "-")))
ggplot(monthly_avg, aes(x = date, y = avg_count)) +
geom_line() +
geom_point() +
labs(title = "Monthly Average Counts",
x = "Date",
y = "Average Count") +
theme_minimal()
ggplot(monthly_avg, aes(x = date, y = pct_zeros)) +
geom_line() +
geom_point() +
labs(title = "Percentage of Zero Counts by Month",
x = "Date",
y = "Percentage of Zero Counts") +
theme_minimal()
people_counter <- people_counter %>%
arrange(time) %>%
mutate(
run_id = cumsum(c(1, diff(is_zero) != 0)),
run_length = sequence(rle(is_zero)$lengths)
)
longest_zero_runs <- people_counter %>%
filter(is_zero) %>%
group_by(run_id) %>%
summarise(
start_date = min(time),
end_date = max(time),
run_length = max(run_length),
.groups = "drop"
) %>%
arrange(desc(run_length))
print("Longest runs of consecutive zero counts:")
print(head(longest_zero_runs, 10))
# Plot the distribution of run lengths for zeros
zero_runs <- people_counter %>%
filter(is_zero) %>%
group_by(run_id) %>%
summarise(run_length = max(run_length), .groups = "drop")
ggplot(zero_runs, aes(x = run_length)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution of Consecutive Zero Count Runs",
x = "Run Length (Days)",
y = "Frequency") +
theme_minimal()
people_counter$day_of_week <- wday(people_counter$time, label = TRUE)
dow_patterns <- people_counter %>%
group_by(period = ifelse(time < mid_2022, "Before Mid-2022", "After Mid-2022"),
day_of_week) %>%
summarise(
avg_count = mean(counter, na.rm = TRUE),
pct_zeros = mean(is_zero, na.rm = TRUE) * 100,
.groups = "drop"
)
ggplot(dow_patterns, aes(x = day_of_week, y = avg_count, fill = period)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Average Count by Day of Week",
x = "Day of Week",
y = "Average Count",
fill = "Period") +
theme_minimal()
ggplot(dow_patterns, aes(x = day_of_week, y = pct_zeros, fill = period)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Percentage of Zeros by Day of Week",
x = "Day of Week",
y = "Percentage of Zeros",
fill = "Period") +
theme_minimal()
# Moving average to detect when the pattern changed
people_counter$ma_30 <- rollmean(people_counter$counter, 30, fill = NA, align = "right")
ggplot(people_counter, aes(x = time)) +
geom_line(aes(y = counter), alpha = 0.3) +
geom_line(aes(y = ma_30), color = "blue", size = 1) +
geom_vline(xintercept = mid_2022, color = "red", linetype = "dashed") +
labs(title = "People Counter with 30-day Moving Average",
x = "Date",
y = "Count") +
theme_minimal()
if (require(changepoint)) {
# Convert to time series
ts_data <- ts(people_counter$counter)
# Detect changes in mean
mean_change <- cpt.mean(ts_data, method = "PELT")
# Get the change points
change_points <- cpts(mean_change)
# Convert change points to dates
change_dates <- people_counter$time[change_points]
print("Detected change points in mean:")
print(change_dates)
# Plot with change points
ggplot(people_counter, aes(x = time, y = counter)) +
geom_line() +
geom_vline(xintercept = mid_2022, color = "red", linetype = "dashed") +
geom_vline(xintercept = change_dates, color = "blue", linetype = "dotted") +
labs(title = "People Counter with Detected Change Points",
x = "Date",
y = "Count") +
theme_minimal()
}
install.packages("changepoint")
#install.packages("changepoint")
library(changepoint)
if (require(changepoint)) {
# Convert to time series
ts_data <- ts(people_counter$counter)
# Detect changes in mean
mean_change <- cpt.mean(ts_data, method = "PELT")
# Get the change points
change_points <- cpts(mean_change)
# Convert change points to dates
change_dates <- people_counter$time[change_points]
print("Detected change points in mean:")
print(change_dates)
# Plot with change points
ggplot(people_counter, aes(x = time, y = counter)) +
geom_line() +
geom_vline(xintercept = mid_2022, color = "red", linetype = "dashed") +
geom_vline(xintercept = change_dates, color = "blue", linetype = "dotted") +
labs(title = "People Counter with Detected Change Points",
x = "Date",
y = "Count") +
theme_minimal()
}
adf_test <- adf.test(people_counter$counter)
print("Augmented Dickey-Fuller Test for Stationarity:")
print(adf_test)
# Compare distribution before and after mid-2022 with kernel density plots
ggplot(people_counter, aes(x = counter, color = time >= mid_2022)) +
geom_density() +
scale_color_manual(values = c("blue", "red"),
labels = c("Before Mid-2022", "After Mid-2022")) +
labs(title = "Distribution of Counts Before and After Mid-2022",
x = "Count",
y = "Density",
color = "Period") +
theme_minimal()
print("SUMMARY OF ANALYSIS:")
print(paste("Total number of days:", nrow(people_counter)))
print(paste("Zero count days before mid-2022:", before_mid_2022$zero_days,
"(", round(before_mid_2022$percent_zeros, 2), "%)"))
print(paste("Zero count days after mid-2022:", after_mid_2022$zero_days,
"(", round(after_mid_2022$percent_zeros, 2), "%)"))
print(paste("Chi-square p-value:", round(chi_result$p.value, 4),
"- Significant difference in zero counts before vs after mid-2022:",
chi_result$p.value < 0.05))
print(paste("Longest run of consecutive zeros:", max(zero_runs$run_length), "days"))
View(people_counter)
