dir.create(base_path, recursive = TRUE)
}
# Step 9: Ensure all required columns exist
required_columns <- c("CounterID", "DateTime", "Date", "Hour", "Year", "Month", "Day",
"Weekday", "PedestriansIn", "PedestriansOut", "TotalCount",
"CombinedCount", "DateKey", "MonthYear", "MonthName", "DayOfWeek",
"WeekdayNumber", "Quarter", "WeekNumber", "IsWeekend", "TimeOfDay",
"TrailCategory", "LastUpdated")
missing_columns <- setdiff(required_columns, names(dataset))
if (length(missing_columns) > 0) {
for (col in missing_columns) {
if (col == "LastUpdated") {
dataset[[col]] <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")
} else if (col == "CombinedCount") {
dataset[[col]] <- coalesce(dataset$PedestriansIn, 0) + coalesce(dataset$PedestriansOut, 0)
} else {
dataset[[col]] <- NA
}
}
}
# Step 10: Export to CSV
write_csv(dataset, paste0(base_path, "EcoCounter_PowerBI_Main2.csv"))
return(dataset)
}
# MAIN EXECUTION
# Step 11: Process the data through the pipeline
processed_data <- process_ecocounter_data(file_path)
powerbi_main <- create_powerbi_main(processed_data)
final_powerbi_data <- export_powerbi_main(powerbi_main)
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(dplyr)
library(lubridate)
library(readr)
# Set file path for data input
file_path <- "C:/Users/tkatayama/OneDrive - DOI/Documents/Projects/R/People_Counter/Data/Raw/All_20250507_0720.csv"
# Main function to process eco-counter data from multiple sites
process_ecocounter_data <- function(file_path) {
# Step 1: Read raw CSV data, skip header rows
raw_data <- read_csv(file_path, skip = 2, na = c(""))
# Step 2: Clean and standardize datetime formatting
clean_data <- raw_data %>%
filter(!is.na(Time)) %>%
mutate(
# Parse datetime with multiple formats
DateTime = mdy_hm(Time),
DateTime = case_when(
is.na(DateTime) ~ mdy_hms(paste0(Time, ":00")),
TRUE ~ DateTime
)
) %>%
filter(!is.na(DateTime)) %>%
# Step 3: Extract date components for analysis
mutate(
Date = as.Date(DateTime),
Hour = hour(DateTime),
Year = year(DateTime),
Month = month(DateTime),
Day = day(DateTime),
Weekday = wday(DateTime, label = TRUE)
)
# Step 4: Create standardized datasets for each counter location
lighthouse_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Lighthouse Pedestrian towards lighthouse`,
PedestriansOut = `Lighthouse Pedestrian out of lighthouse`) %>%
mutate(CounterID = "Lighthouse")
bayside_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Bayside Pedestrian In`,
PedestriansOut = `Bayside Pedestrian out`) %>%
mutate(CounterID = "Bayside Trail")
lot1_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `CABR Lot 1 Counter IN`,
PedestriansOut = `CABR Lot 1 Counter OUT`) %>%
mutate(CounterID = "Tidepool Lot 1")
lot2_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `CABR Lot 2 Counter IN`,
PedestriansOut = `CABR Lot 2 Counter OUT`) %>%
mutate(CounterID = "Tidepool Lot 2")
oceanside1_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Oceanside Trail 1 Pedestrian IN`,
PedestriansOut = `Oceanside Trail 1 Pedestrian OUT`) %>%
mutate(CounterID = "Oceanside Trail 1")
# Step 5: Combine all sites and calculate totals
processed_data <- bind_rows(lighthouse_data, bayside_data, lot1_data,
lot2_data, oceanside1_data) %>%
mutate(
# Primary count uses OUT to avoid double counting
TotalCount = case_when(
is.na(PedestriansOut) & is.na(PedestriansIn) ~ NA_real_,
is.na(PedestriansOut) ~ PedestriansIn,
TRUE ~ PedestriansOut
),
# Combined count for reference
CombinedCount = case_when(
is.na(PedestriansIn) & is.na(PedestriansOut) ~ NA_real_,
is.na(PedestriansIn) ~ PedestriansOut,
is.na(PedestriansOut) ~ PedestriansIn,
TRUE ~ PedestriansIn + PedestriansOut
)
) %>%
select(CounterID, DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn, PedestriansOut, TotalCount, CombinedCount) %>%
arrange(CounterID, DateTime)
return(processed_data)
}
# Function to create Power BI-ready dataset
create_powerbi_main <- function(data) {
# Step 6: Add Power BI analysis columns and clean data
powerbi_main <- data %>%
filter(!is.na(TotalCount)) %>%
mutate(
# Power BI date formats
DateKey = as.numeric(format(Date, "%Y%m%d")),
MonthYear = format(Date, "%Y-%m"),
MonthName = month(Date, label = TRUE, abbr = FALSE),
DayOfWeek = wday(Date, label = TRUE, abbr = FALSE),
WeekdayNumber = wday(Date, week_start = 1),
Quarter = paste0("Q", quarter(Date)),
WeekNumber = week(Date),
IsWeekend = ifelse(wday(Date) %in% c(1, 7), "Weekend", "Weekday"),
# Time categorization
TimeOfDay = case_when(
Hour >= 5 & Hour < 12 ~ "Morning",
Hour >= 12 & Hour < 17 ~ "Afternoon",
Hour >= 17 & Hour < 21 ~ "Evening",
TRUE ~ "Night"
),
# Trail categorization
TrailCategory = case_when(
grepl("Lighthouse", CounterID) ~ "Lighthouse Area",
grepl("Bayside", CounterID) ~ "Bayside Trail",
grepl("Tidepool", CounterID) ~ "Tidepool Area",
grepl("Oceanside", CounterID) ~ "Oceanside Trail",
TRUE ~ "Other"
)
) %>%
# Step 7: Handle missing values and finalize counts
filter(!is.na(PedestriansIn) | !is.na(PedestriansOut)) %>%
mutate(
PedestriansIn = ifelse(is.na(PedestriansIn), 0, PedestriansIn),
PedestriansOut = ifelse(is.na(PedestriansOut), 0, PedestriansOut),
TotalCount = case_when(
PedestriansOut > 0 ~ PedestriansOut,
PedestriansOut == 0 & PedestriansIn > 0 ~ PedestriansIn,
TRUE ~ 0
),
CombinedCount = PedestriansIn + PedestriansOut,
LastUpdated = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
)
return(powerbi_main)
}
# Function to export final dataset
export_powerbi_main <- function(dataset, base_path = "Data/Processed/PowerBI/") {
# Step 8: Create output directory
if (!dir.exists(base_path)) {
dir.create(base_path, recursive = TRUE)
}
# Step 9: Ensure all required columns exist
required_columns <- c("CounterID", "DateTime", "Date", "Hour", "Year", "Month", "Day",
"Weekday", "PedestriansIn", "PedestriansOut", "TotalCount",
"CombinedCount", "DateKey", "MonthYear", "MonthName", "DayOfWeek",
"WeekdayNumber", "Quarter", "WeekNumber", "IsWeekend", "TimeOfDay",
"TrailCategory", "LastUpdated")
missing_columns <- setdiff(required_columns, names(dataset))
if (length(missing_columns) > 0) {
for (col in missing_columns) {
if (col == "LastUpdated") {
dataset[[col]] <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")
} else if (col == "CombinedCount") {
dataset[[col]] <- coalesce(dataset$PedestriansIn, 0) + coalesce(dataset$PedestriansOut, 0)
} else {
dataset[[col]] <- NA
}
}
}
# Step 10: Export to CSV
write_csv(dataset, paste0(base_path, "EcoCounter_PowerBI_Main2.csv"))
return(dataset)
}
# MAIN EXECUTION
# Step 11: Process the data through the pipeline
processed_data <- process_ecocounter_data(file_path)
powerbi_main <- create_powerbi_main(processed_data)
final_powerbi_data <- export_powerbi_main(powerbi_main)
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(dplyr)
library(lubridate)
library(readr)
setwd("C:/Users/tkatayama/OneDrive - DOI/Documents/Projects/R/People_Counter/")
# Set file path for data input
file_path <- "C:/Users/tkatayama/OneDrive - DOI/Documents/Projects/R/People_Counter/Data/Raw/All_20250507_0720.csv"
# Main function to process eco-counter data from multiple sites
process_ecocounter_data <- function(file_path) {
# Step 1: Read raw CSV data, skip header rows
raw_data <- read_csv(file_path, skip = 2, na = c(""))
# Step 2: Clean and standardize datetime formatting
clean_data <- raw_data %>%
filter(!is.na(Time)) %>%
mutate(
# Parse datetime with multiple formats
DateTime = mdy_hm(Time),
DateTime = case_when(
is.na(DateTime) ~ mdy_hms(paste0(Time, ":00")),
TRUE ~ DateTime
)
) %>%
filter(!is.na(DateTime)) %>%
# Step 3: Extract date components for analysis
mutate(
Date = as.Date(DateTime),
Hour = hour(DateTime),
Year = year(DateTime),
Month = month(DateTime),
Day = day(DateTime),
Weekday = wday(DateTime, label = TRUE)
)
# Step 4: Create standardized datasets for each counter location
lighthouse_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Lighthouse Pedestrian towards lighthouse`,
PedestriansOut = `Lighthouse Pedestrian out of lighthouse`) %>%
mutate(CounterID = "Lighthouse")
bayside_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Bayside Pedestrian In`,
PedestriansOut = `Bayside Pedestrian out`) %>%
mutate(CounterID = "Bayside Trail")
lot1_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `CABR Lot 1 Counter IN`,
PedestriansOut = `CABR Lot 1 Counter OUT`) %>%
mutate(CounterID = "Tidepool Lot 1")
lot2_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `CABR Lot 2 Counter IN`,
PedestriansOut = `CABR Lot 2 Counter OUT`) %>%
mutate(CounterID = "Tidepool Lot 2")
oceanside1_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Oceanside Trail 1 Pedestrian IN`,
PedestriansOut = `Oceanside Trail 1 Pedestrian OUT`) %>%
mutate(CounterID = "Oceanside Trail 1")
# Step 5: Combine all sites and calculate totals
processed_data <- bind_rows(lighthouse_data, bayside_data, lot1_data,
lot2_data, oceanside1_data) %>%
mutate(
# Primary count uses OUT to avoid double counting
TotalCount = case_when(
is.na(PedestriansOut) & is.na(PedestriansIn) ~ NA_real_,
is.na(PedestriansOut) ~ PedestriansIn,
TRUE ~ PedestriansOut
),
# Combined count for reference
CombinedCount = case_when(
is.na(PedestriansIn) & is.na(PedestriansOut) ~ NA_real_,
is.na(PedestriansIn) ~ PedestriansOut,
is.na(PedestriansOut) ~ PedestriansIn,
TRUE ~ PedestriansIn + PedestriansOut
)
) %>%
select(CounterID, DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn, PedestriansOut, TotalCount, CombinedCount) %>%
arrange(CounterID, DateTime)
return(processed_data)
}
# Function to create Power BI-ready dataset
create_powerbi_main <- function(data) {
# Step 6: Add Power BI analysis columns and clean data
powerbi_main <- data %>%
filter(!is.na(TotalCount)) %>%
mutate(
# Power BI date formats
DateKey = as.numeric(format(Date, "%Y%m%d")),
MonthYear = format(Date, "%Y-%m"),
MonthName = month(Date, label = TRUE, abbr = FALSE),
DayOfWeek = wday(Date, label = TRUE, abbr = FALSE),
WeekdayNumber = wday(Date, week_start = 1),
Quarter = paste0("Q", quarter(Date)),
WeekNumber = week(Date),
IsWeekend = ifelse(wday(Date) %in% c(1, 7), "Weekend", "Weekday"),
# Time categorization
TimeOfDay = case_when(
Hour >= 5 & Hour < 12 ~ "Morning",
Hour >= 12 & Hour < 17 ~ "Afternoon",
Hour >= 17 & Hour < 21 ~ "Evening",
TRUE ~ "Night"
),
# Trail categorization
TrailCategory = case_when(
grepl("Lighthouse", CounterID) ~ "Lighthouse Area",
grepl("Bayside", CounterID) ~ "Bayside Trail",
grepl("Tidepool", CounterID) ~ "Tidepool Area",
grepl("Oceanside", CounterID) ~ "Oceanside Trail",
TRUE ~ "Other"
)
) %>%
# Step 7: Handle missing values and finalize counts
filter(!is.na(PedestriansIn) | !is.na(PedestriansOut)) %>%
mutate(
PedestriansIn = ifelse(is.na(PedestriansIn), 0, PedestriansIn),
PedestriansOut = ifelse(is.na(PedestriansOut), 0, PedestriansOut),
TotalCount = case_when(
PedestriansOut > 0 ~ PedestriansOut,
PedestriansOut == 0 & PedestriansIn > 0 ~ PedestriansIn,
TRUE ~ 0
),
CombinedCount = PedestriansIn + PedestriansOut,
LastUpdated = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
)
return(powerbi_main)
}
# Function to export final dataset
export_powerbi_main <- function(dataset, base_path = "Data/Processed/PowerBI/") {
# Step 8: Create output directory
if (!dir.exists(base_path)) {
dir.create(base_path, recursive = TRUE)
}
# Step 9: Ensure all required columns exist
required_columns <- c("CounterID", "DateTime", "Date", "Hour", "Year", "Month", "Day",
"Weekday", "PedestriansIn", "PedestriansOut", "TotalCount",
"CombinedCount", "DateKey", "MonthYear", "MonthName", "DayOfWeek",
"WeekdayNumber", "Quarter", "WeekNumber", "IsWeekend", "TimeOfDay",
"TrailCategory", "LastUpdated")
missing_columns <- setdiff(required_columns, names(dataset))
if (length(missing_columns) > 0) {
for (col in missing_columns) {
if (col == "LastUpdated") {
dataset[[col]] <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")
} else if (col == "CombinedCount") {
dataset[[col]] <- coalesce(dataset$PedestriansIn, 0) + coalesce(dataset$PedestriansOut, 0)
} else {
dataset[[col]] <- NA
}
}
}
# Step 10: Export to CSV
write_csv(dataset, paste0(base_path, "EcoCounter_PowerBI_Main2.csv"))
return(dataset)
}
# MAIN EXECUTION
# Step 11: Process the data through the pipeline
processed_data <- process_ecocounter_data(file_path)
powerbi_main <- create_powerbi_main(processed_data)
final_powerbi_data <- export_powerbi_main(powerbi_main)
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(dplyr)
library(lubridate)
library(readr)
setwd("C:/Users/tkatayama/OneDrive - DOI/Documents/Projects/R/People_Counter/")
# Set file path for data input
file_path <- "C:/Users/tkatayama/OneDrive - DOI/Documents/Projects/R/People_Counter/Data/Raw/All_20250507_0720.csv"
# Main function to process eco-counter data from multiple sites
process_ecocounter_data <- function(file_path) {
# Step 1: Read raw CSV data, skip header rows
raw_data <- read_csv(file_path, skip = 2, na = c(""))
# Step 2: Clean and standardize datetime formatting
clean_data <- raw_data %>%
filter(!is.na(Time)) %>%
mutate(
# Parse datetime with multiple formats
DateTime = mdy_hm(Time),
DateTime = case_when(
is.na(DateTime) ~ mdy_hms(paste0(Time, ":00")),
TRUE ~ DateTime
)
) %>%
filter(!is.na(DateTime)) %>%
# Step 3: Extract date components for analysis
mutate(
Date = as.Date(DateTime),
Hour = hour(DateTime),
Year = year(DateTime),
Month = month(DateTime),
Day = day(DateTime),
Weekday = wday(DateTime, label = TRUE)
)
# Step 4: Create standardized datasets for each counter location
lighthouse_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Lighthouse Pedestrian towards lighthouse`,
PedestriansOut = `Lighthouse Pedestrian out of lighthouse`) %>%
mutate(CounterID = "Lighthouse")
bayside_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Bayside Pedestrian In`,
PedestriansOut = `Bayside Pedestrian out`) %>%
mutate(CounterID = "Bayside Trail")
lot1_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `CABR Lot 1 Counter IN`,
PedestriansOut = `CABR Lot 1 Counter OUT`) %>%
mutate(CounterID = "Tidepool Lot 1")
lot2_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `CABR Lot 2 Counter IN`,
PedestriansOut = `CABR Lot 2 Counter OUT`) %>%
mutate(CounterID = "Tidepool Lot 2")
oceanside1_data <- clean_data %>%
select(DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn = `Oceanside Trail 1 Pedestrian IN`,
PedestriansOut = `Oceanside Trail 1 Pedestrian OUT`) %>%
mutate(CounterID = "Oceanside Trail 1")
# Step 5: Combine all sites and calculate totals
processed_data <- bind_rows(lighthouse_data, bayside_data, lot1_data,
lot2_data, oceanside1_data) %>%
mutate(
# Primary count uses OUT to avoid double counting
TotalCount = case_when(
is.na(PedestriansOut) & is.na(PedestriansIn) ~ NA_real_,
is.na(PedestriansOut) ~ PedestriansIn,
TRUE ~ PedestriansOut
),
# Combined count for reference
CombinedCount = case_when(
is.na(PedestriansIn) & is.na(PedestriansOut) ~ NA_real_,
is.na(PedestriansIn) ~ PedestriansOut,
is.na(PedestriansOut) ~ PedestriansIn,
TRUE ~ PedestriansIn + PedestriansOut
)
) %>%
select(CounterID, DateTime, Date, Hour, Year, Month, Day, Weekday,
PedestriansIn, PedestriansOut, TotalCount, CombinedCount) %>%
arrange(CounterID, DateTime)
return(processed_data)
}
# Function to create Power BI-ready dataset
create_powerbi_main <- function(data) {
# Step 6: Add Power BI analysis columns and clean data
powerbi_main <- data %>%
filter(!is.na(TotalCount)) %>%
mutate(
# Power BI date formats
DateKey = as.numeric(format(Date, "%Y%m%d")),
MonthYear = format(Date, "%Y-%m"),
MonthName = month(Date, label = TRUE, abbr = FALSE),
DayOfWeek = wday(Date, label = TRUE, abbr = FALSE),
WeekdayNumber = wday(Date, week_start = 1),
Quarter = paste0("Q", quarter(Date)),
WeekNumber = week(Date),
IsWeekend = ifelse(wday(Date) %in% c(1, 7), "Weekend", "Weekday"),
# Time categorization
TimeOfDay = case_when(
Hour >= 5 & Hour < 12 ~ "Morning",
Hour >= 12 & Hour < 17 ~ "Afternoon",
Hour >= 17 & Hour < 21 ~ "Evening",
TRUE ~ "Night"
),
# Trail categorization
TrailCategory = case_when(
grepl("Lighthouse", CounterID) ~ "Lighthouse Area",
grepl("Bayside", CounterID) ~ "Bayside Trail",
grepl("Tidepool", CounterID) ~ "Tidepool Area",
grepl("Oceanside", CounterID) ~ "Oceanside Trail",
TRUE ~ "Other"
)
) %>%
# Step 7: Handle missing values and finalize counts
filter(!is.na(PedestriansIn) | !is.na(PedestriansOut)) %>%
mutate(
PedestriansIn = ifelse(is.na(PedestriansIn), 0, PedestriansIn),
PedestriansOut = ifelse(is.na(PedestriansOut), 0, PedestriansOut),
TotalCount = case_when(
PedestriansOut > 0 ~ PedestriansOut,
PedestriansOut == 0 & PedestriansIn > 0 ~ PedestriansIn,
TRUE ~ 0
),
CombinedCount = PedestriansIn + PedestriansOut,
LastUpdated = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
)
return(powerbi_main)
}
# Function to export final dataset
export_powerbi_main <- function(dataset, base_path = "Data/Processed/PowerBI/") {
# Step 8: Create output directory
if (!dir.exists(base_path)) {
dir.create(base_path, recursive = TRUE)
}
# Step 9: Ensure all required columns exist
required_columns <- c("CounterID", "DateTime", "Date", "Hour", "Year", "Month", "Day",
"Weekday", "PedestriansIn", "PedestriansOut", "TotalCount",
"CombinedCount", "DateKey", "MonthYear", "MonthName", "DayOfWeek",
"WeekdayNumber", "Quarter", "WeekNumber", "IsWeekend", "TimeOfDay",
"TrailCategory", "LastUpdated")
missing_columns <- setdiff(required_columns, names(dataset))
if (length(missing_columns) > 0) {
for (col in missing_columns) {
if (col == "LastUpdated") {
dataset[[col]] <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")
} else if (col == "CombinedCount") {
dataset[[col]] <- coalesce(dataset$PedestriansIn, 0) + coalesce(dataset$PedestriansOut, 0)
} else {
dataset[[col]] <- NA
}
}
}
# Step 10: Export to CSV
write_csv(dataset, paste0(base_path, "EcoCounter_PowerBI_Main2.csv"))
return(dataset)
}
# MAIN EXECUTION
# Step 11: Process the data through the pipeline
processed_data <- process_ecocounter_data(file_path)
powerbi_main <- create_powerbi_main(processed_data)
final_powerbi_data <- export_powerbi_main(powerbi_main)
